<?php
// Tests temporarily disabled because FAQ isnt present in 3.26.0 release.
//
//use Wordlift\Faq\Faq_Rest_Controller;
//use Wordlift\Faq\Faq_To_Jsonld_Converter;
//
///**
// * Tests: Tests the FAQ Rest Controller
// * @since 3.26.0
// * @package wordlift
// * @subpackage wordlift/tests
// *
// */
//
//class Faq_To_Jsonld_Converter_Test extends Wordlift_Unit_Test_Case {
//	public function setUp() {
//		parent::setUp(); // TODO: Change the autogenerated stub
//		$this->jsonld_service     = Wordlift_Jsonld_Service::get_instance();
//	}
//
//	public function test_if_converter_returns_correct_type() {
//		$post_id = $this->factory()->post->create( array('post_title' => 'foo'));
//		add_post_meta( $post_id, Faq_Rest_Controller::FAQ_META_KEY, array(
//			'question' => 'foo1',
//			'answer' => 'bar1'
//		));
//		$jsonlds       = $this->jsonld_service->get_jsonld( false, $post_id );
//		$data = end( $jsonlds );
//		$this->assertArrayHasKey( '@type', $data );
//		// The default type for json ld is article, now faq is present then the type should be array.
//		$this->assertEquals( in_array(Faq_To_Jsonld_Converter::FAQ_JSONLD_TYPE, $data['@type']), true);
//
//	}
//
//	public function test_given_sample_faq_data_return_correct_jsonld() {
//		$post_id = $this->factory()->post->create( array('post_title' => 'foo'));
//		add_post_meta( $post_id, Faq_Rest_Controller::FAQ_META_KEY, array(
//			'question' => 'foo1',
//			'answer' => 'bar1'
//		));
//		add_post_meta( $post_id, Faq_Rest_Controller::FAQ_META_KEY, array(
//			'question' => 'foo2',
//			'answer' => 'bar2'
//		));
//		$jsonlds       = $this->jsonld_service->get_jsonld( false, $post_id );
//		$data = end( $jsonlds );
//		$this->assertArrayHasKey( 'mainEntity', $data );
//		$this->assertCount( 2, $data['mainEntity'] );
//		$single_faq_item = $data['mainEntity'][0];
//		$this->assertArrayHasKey( '@type', $single_faq_item );
//		$this->assertArrayHasKey( 'name', $single_faq_item );
//		$this->assertEquals($single_faq_item['@type'], 'Question');
//		$this->assertEquals($single_faq_item['name'], 'foo1');
//
//		$this->assertArrayHasKey( 'acceptedAnswer', $single_faq_item );
//		$single_answer = $single_faq_item['acceptedAnswer'];
//		$this->assertArrayHasKey( '@type', $single_answer );
//		$this->assertArrayHasKey( 'text', $single_answer );
//		$this->assertEquals($single_answer['@type'], 'Answer');
//		$this->assertEquals($single_answer['text'], 'bar1');
//
//	}
//}
