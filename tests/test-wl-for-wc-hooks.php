<?php
/**
 * Tests: Tests the hooks added for plugin wordlift for woocommerce.
 * @author Naveen Muthusamy <naveen@wordlift.io>
 * @since ?.??.?
 * @package wordlift
 * @subpackage wordlift/tests
 */

/**
 * Class Test_Wl_For_Wc_Hooks
 * @group wl_for_wc
 */
class Test_Wl_For_Wc_Hooks extends WP_UnitTestCase {

	public function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
		// Enable mappings for the tests
		if ( ! defined( 'WL_ENABLE_MAPPINGS' ) ) {
			define( 'WL_ENABLE_MAPPINGS', true );
		}
	}


	public function test_when_wl_feature_enable_setup_screen_added_should_disable_setup_screen() {
		global $wp_filter;
		$wp_filter = array();
		add_filter( 'wl_feature__enable__setup_screen', '__return_false' );
		$wordlift = new Wordlift();
		$wordlift->run();
		$this->assertFalse( remove_action( 'admin_init', array(
			Wordlift::get_instance()->admin_setup,
			'show_page'
		) ) );
	}

	public function test_when_wl_feature_enable_setup_screen_added_should_enable_setup_screen() {
		global $wp_filter;
		$wp_filter = array();
		add_filter( 'wl_feature__enable__setup_screen', '__return_true' );
		$wordlift = new Wordlift();
		$wordlift->run();
		$this->assertTrue( remove_action( 'admin_init', array(
			Wordlift::get_instance()->admin_setup,
			'show_page'
		) ) );
	}


	public function test_blocks_enabled_correctly_without_filter() {
		/**
		 * Removing this action because register_block_type triggers doing_it_wrong which causes phpunit error.
		 */
		remove_all_actions( 'doing_it_wrong_run' );
		$this->assertFalse( register_block_type( 'wordlift/chord' ) );
		$this->assertFalse( register_block_type( 'wordlift/navigator' ) );
		$this->assertFalse( register_block_type( 'wordlift/geomap' ) );
		$this->assertFalse( register_block_type( 'wordlift/timeline' ) );
		$this->assertFalse( register_block_type( 'wordlift/cloud' ) );
		$this->assertFalse( register_block_type( 'wordlift/vocabulary' ) );
		$this->assertFalse( register_block_type( 'wordlift/faceted-search' ) );
		$this->assertFalse( register_block_type( 'wordlift/products-navigator' ) );
	}

	public function test_blocks_disabled_with_filter_should_still_allow_products_navigator() {
		/**
		 * Removing this action because register_block_type triggers doing_it_wrong which causes phpunit error.
		 */
		remove_all_actions( 'doing_it_wrong_run' );

		// remove all registered blocks
		$registered_blocks = WP_Block_Type_Registry::get_instance()->get_all_registered();
		foreach ( $registered_blocks as $block ) {
			WP_Block_Type_Registry::get_instance()->unregister( $block );
		}

		add_filter( 'wl_feature__enable__blocks', '__return_false' );
		remove_all_actions( 'init' );

		new Wordlift();

		do_action( 'init' );
		$this->assertFalse( register_block_type( 'wordlift/products-navigator' ) );
		// should be able to register these blocks.
		$registry = WP_Block_Type_Registry::get_instance();
		$this->assertFalse( $registry->is_registered( 'wordlift/chord' ) );
		$this->assertFalse( $registry->is_registered( 'wordlift/navigator' ) );
		$this->assertFalse( $registry->is_registered( 'wordlift/geomap' ) );
		$this->assertFalse( $registry->is_registered( 'wordlift/timeline' ) );
		$this->assertFalse( $registry->is_registered( 'wordlift/cloud' ) );
		$this->assertFalse( $registry->is_registered( 'wordlift/vocabulary' ) );
		$this->assertFalse( $registry->is_registered( 'wordlift/faceted-search' ) );
	}

	public function test_on_default_state_three_widgets_should_be_registered() {
		global $wp_widget_factory;
		$this->assertTrue( isset( $wp_widget_factory->widgets['WordLift_Chord_Widget'] ) );
		$this->assertTrue( isset( $wp_widget_factory->widgets['WordLift_Geo_Widget'] ) );
		$this->assertTrue( isset( $wp_widget_factory->widgets['WordLift_Timeline_Widget'] ) );
	}

	public function test_on_filter_activated_widgets_should_not_be_present() {
		add_filter( 'wl_feature__enable__widgets', '__return_false' );
		global $wp_widget_factory;
		$wp_widget_factory->widgets = array();
		run_wordlift();
		// These 3 widgets shouldnt be present.
		$this->assertFalse( isset( $wp_widget_factory->widgets['WordLift_Chord_Widget'] ) );
		$this->assertFalse( isset( $wp_widget_factory->widgets['WordLift_Geo_Widget'] ) );
		$this->assertFalse( isset( $wp_widget_factory->widgets['WordLift_Timeline_Widget'] ) );
	}


	public function test_by_default_all_screens_should_be_registered() {
		$user = $this->factory->user->create( array( 'role' => 'administrator' ) );
		wp_set_current_user( $user );

		global $wp_filter;
		$wp_filter = array();
		$wordlift  = new Wordlift();
		$wordlift->run();
		do_action( 'admin_menu' );

		global $submenu;

		$this->assertCount( 3, $submenu );
	}

	public function test_when_filter_turned_on_no_screen_should_be_registered() {
		global $wp_filter;
		$wp_filter = array();
		$user      = $this->factory->user->create( array( 'role' => 'administrator' ) );
		wp_set_current_user( $user );
		add_filter( 'wl_feature__enable__screens', '__return_false' );
		global $submenu;
		$submenu = array();

		$wordlift = new Wordlift();
		$wordlift->run();
		do_action( 'admin_menu' );

		$this->assertCount( 0, $submenu );
	}


	public function test_when_filter_not_active_should_show_two_notices() {
		// set key to empty
		update_option( 'wl_general_settings', array() );
		global $wp_filter;
		$wp_filter = array();
		$wordlift  = new Wordlift();
		$wordlift->run();
		/**
		 * @var $wp_hook WP_Hook
		 */
		$wp_hook = $wp_filter['admin_notices'];
		$this->assertNotEquals( 0, count( $wp_hook->callbacks ) );
	}

	public function test_when_filter_active_should_not_show_notices() {
		// set key to empty
		update_option( 'wl_general_settings', array() );
		global $wp_filter;
		$wp_filter = array();
		add_filter( 'wl_feature__enable__notices', '__return_false' );
		$wordlift = new Wordlift();
		$wordlift->run();

		$this->assertFalse( array_key_exists( 'admin_notices', $wp_filter ) );
	}


	public function test_when_filter_not_active_show_in_menu_should_be_true() {
		$post_type = get_post_type_object(
			'entity'
		);
		$this->assertTrue( $post_type->show_in_menu );
	}

	public function test_when_filter_enabled_show_in_menu_should_be_false() {
		unregister_post_type( 'entity' );
		add_filter( 'wl_feature__enable__vocabulary', '__return_false' );
		Wordlift_Entity_Post_Type_Service::get_instance()->register();
		$post_type = get_post_type_object(
			'entity'
		);
		$this->assertFalse( $post_type->show_in_menu );
	}

}